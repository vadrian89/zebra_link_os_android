// Copyright 2024 Adrian Verban

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'DiscoveredPrinter.dart' as discoveredprinter_;

/// from: `com.zebra.sdk.printer.discovery.DiscoveredPrinterBluetooth`
class DiscoveredPrinterBluetooth extends discoveredprinter_.DiscoveredPrinter {
  @override
  late final jni.JObjType<DiscoveredPrinterBluetooth> $type = type;

  DiscoveredPrinterBluetooth.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth');

  /// The type which includes information such as the signature of this class.
  static const type = $DiscoveredPrinterBluetoothType();
  static final _id_friendlyName = _class.instanceFieldId(
    r'friendlyName',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String friendlyName`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get friendlyName =>
      _id_friendlyName.get(this, const jni.JStringType());

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory DiscoveredPrinterBluetooth.new1(
    jni.JString string,
    jni.JString string1,
  ) {
    return DiscoveredPrinterBluetooth.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_getConnection = _class.instanceMethodId(
    r'getConnection',
    r'()Lcom/zebra/sdk/comm/Connection;',
  );

  static final _getConnection = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public com.zebra.sdk.comm.Connection getConnection()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getConnection() {
    return _getConnection(
            reference.pointer, _id_getConnection as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $DiscoveredPrinterBluetoothType
    extends jni.JObjType<DiscoveredPrinterBluetooth> {
  const $DiscoveredPrinterBluetoothType();

  @override
  String get signature =>
      r'Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;';

  @override
  DiscoveredPrinterBluetooth fromReference(jni.JReference reference) =>
      DiscoveredPrinterBluetooth.fromReference(reference);

  @override
  jni.JObjType get superType =>
      const discoveredprinter_.$DiscoveredPrinterType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($DiscoveredPrinterBluetoothType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DiscoveredPrinterBluetoothType) &&
        other is $DiscoveredPrinterBluetoothType;
  }
}
