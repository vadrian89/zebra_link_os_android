// Copyright 2024 Adrian Verban

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../com/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth.dart'
    as discoveredprinterbluetooth_;

/// from: `co.fieldos.zebra_link_os.DiscoveryHandlerBluetooth`
class DiscoveryHandlerBluetooth extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<DiscoveryHandlerBluetooth> $type;

  @_$jni.internal
  DiscoveryHandlerBluetooth.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'co/fieldos/zebra_link_os/DiscoveryHandlerBluetooth');

  /// The type which includes information such as the signature of this class.
  static const type = $DiscoveryHandlerBluetooth$Type();
  static final _id_onFound = _class.instanceMethodId(
    r'onFound',
    r'(Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;)V',
  );

  static final _onFound = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onFound(com.zebra.sdk.printer.discovery.DiscoveredPrinterBluetooth discoveredPrinterBluetooth)`
  void onFound(
    discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
        discoveredPrinterBluetooth,
  ) {
    _onFound(reference.pointer, _id_onFound as _$jni.JMethodIDPtr,
            discoveredPrinterBluetooth.reference.pointer)
        .check();
  }

  static final _id_onFinished = _class.instanceMethodId(
    r'onFinished',
    r'()V',
  );

  static final _onFinished = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onFinished()`
  void onFinished() {
    _onFinished(reference.pointer, _id_onFinished as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $DiscoveryHandlerBluetooth> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onFound(Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;)V') {
        _$impls[$p]!.onFound(
          $a[0].as(
              const discoveredprinterbluetooth_
                  .$DiscoveredPrinterBluetooth$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onFinished()V') {
        _$impls[$p]!.onFinished();
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $DiscoveryHandlerBluetooth $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'co.fieldos.zebra_link_os.DiscoveryHandlerBluetooth',
      $p,
      _$invokePointer,
      [
        if ($impl.onFound$async)
          r'onFound(Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;)V',
        if ($impl.onFinished$async) r'onFinished()V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory DiscoveryHandlerBluetooth.implement(
    $DiscoveryHandlerBluetooth $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return DiscoveryHandlerBluetooth.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $DiscoveryHandlerBluetooth {
  factory $DiscoveryHandlerBluetooth({
    required void Function(
            discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
                discoveredPrinterBluetooth)
        onFound,
    bool onFound$async,
    required void Function() onFinished,
    bool onFinished$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$DiscoveryHandlerBluetooth;

  void onFound(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth);
  bool get onFound$async => false;
  void onFinished();
  bool get onFinished$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$DiscoveryHandlerBluetooth with $DiscoveryHandlerBluetooth {
  _$DiscoveryHandlerBluetooth({
    required void Function(
            discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
                discoveredPrinterBluetooth)
        onFound,
    this.onFound$async = false,
    required void Function() onFinished,
    this.onFinished$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onFound = onFound,
        _onFinished = onFinished,
        _onError = onError;

  final void Function(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth) _onFound;
  final bool onFound$async;
  final void Function() _onFinished;
  final bool onFinished$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onFound(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth) {
    return _onFound(discoveredPrinterBluetooth);
  }

  void onFinished() {
    return _onFinished();
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $DiscoveryHandlerBluetooth$Type
    extends _$jni.JObjType<DiscoveryHandlerBluetooth> {
  @_$jni.internal
  const $DiscoveryHandlerBluetooth$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lco/fieldos/zebra_link_os/DiscoveryHandlerBluetooth;';

  @_$jni.internal
  @_$core.override
  DiscoveryHandlerBluetooth fromReference(_$jni.JReference reference) =>
      DiscoveryHandlerBluetooth.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($DiscoveryHandlerBluetooth$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($DiscoveryHandlerBluetooth$Type) &&
        other is $DiscoveryHandlerBluetooth$Type;
  }
}
