// Copyright 2024 Adrian Verban

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../../../com/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth.dart'
    as discoveredprinterbluetooth_;

/// from: `co.fieldos.zebra_link_os.DiscoveryHandlerBluetooth`
class DiscoveryHandlerBluetooth extends jni.JObject {
  @override
  late final jni.JObjType<DiscoveryHandlerBluetooth> $type = type;

  DiscoveryHandlerBluetooth.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'co/fieldos/zebra_link_os/DiscoveryHandlerBluetooth');

  /// The type which includes information such as the signature of this class.
  static const type = $DiscoveryHandlerBluetoothType();
  static final _id_onFound = _class.instanceMethodId(
    r'onFound',
    r'(Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;)V',
  );

  static final _onFound = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onFound(com.zebra.sdk.printer.discovery.DiscoveredPrinterBluetooth discoveredPrinterBluetooth)`
  void onFound(
    discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
        discoveredPrinterBluetooth,
  ) {
    _onFound(reference.pointer, _id_onFound as jni.JMethodIDPtr,
            discoveredPrinterBluetooth.reference.pointer)
        .check();
  }

  static final _id_onFinished = _class.instanceMethodId(
    r'onFinished',
    r'()V',
  );

  static final _onFinished = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onFinished()`
  void onFinished() {
    _onFinished(reference.pointer, _id_onFinished as jni.JMethodIDPtr).check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $DiscoveryHandlerBluetoothImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onFound(Lcom/zebra/sdk/printer/discovery/DiscoveredPrinterBluetooth;)V') {
        _$impls[$p]!.onFound(
          $a[0].castTo(
              const discoveredprinterbluetooth_
                  .$DiscoveredPrinterBluetoothType(),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'onFinished()V') {
        _$impls[$p]!.onFinished();
        return jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory DiscoveryHandlerBluetooth.implement(
    $DiscoveryHandlerBluetoothImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = DiscoveryHandlerBluetooth.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'co.fieldos.zebra_link_os.DiscoveryHandlerBluetooth',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $DiscoveryHandlerBluetoothImpl {
  factory $DiscoveryHandlerBluetoothImpl({
    required void Function(
            discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
                discoveredPrinterBluetooth)
        onFound,
    required void Function() onFinished,
    required void Function(jni.JString string) onError,
  }) = _$DiscoveryHandlerBluetoothImpl;

  void onFound(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth);
  void onFinished();
  void onError(jni.JString string);
}

class _$DiscoveryHandlerBluetoothImpl
    implements $DiscoveryHandlerBluetoothImpl {
  _$DiscoveryHandlerBluetoothImpl({
    required void Function(
            discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
                discoveredPrinterBluetooth)
        onFound,
    required void Function() onFinished,
    required void Function(jni.JString string) onError,
  })  : _onFound = onFound,
        _onFinished = onFinished,
        _onError = onError;

  final void Function(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth) _onFound;
  final void Function() _onFinished;
  final void Function(jni.JString string) _onError;

  void onFound(
      discoveredprinterbluetooth_.DiscoveredPrinterBluetooth
          discoveredPrinterBluetooth) {
    return _onFound(discoveredPrinterBluetooth);
  }

  void onFinished() {
    return _onFinished();
  }

  void onError(jni.JString string) {
    return _onError(string);
  }
}

final class $DiscoveryHandlerBluetoothType
    extends jni.JObjType<DiscoveryHandlerBluetooth> {
  const $DiscoveryHandlerBluetoothType();

  @override
  String get signature =>
      r'Lco/fieldos/zebra_link_os/DiscoveryHandlerBluetooth;';

  @override
  DiscoveryHandlerBluetooth fromReference(jni.JReference reference) =>
      DiscoveryHandlerBluetooth.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DiscoveryHandlerBluetoothType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DiscoveryHandlerBluetoothType) &&
        other is $DiscoveryHandlerBluetoothType;
  }
}
