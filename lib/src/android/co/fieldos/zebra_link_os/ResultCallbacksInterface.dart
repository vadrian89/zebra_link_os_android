// Copyright 2024 Adrian Verban

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: co.fieldos.zebra_link_os.ResultCallbacksInterface
class ResultCallbacksInterface extends jni.JObject {
  @override
  late final jni.JObjType<ResultCallbacksInterface> $type = type;

  ResultCallbacksInterface.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"co/fieldos/zebra_link_os/ResultCallbacksInterface");

  /// The type which includes information such as the signature of this class.
  static const type = $ResultCallbacksInterfaceType();
  static final _id_onSuccess = _class.instanceMethodId(
    r"onSuccess",
    r"(Ljava/lang/String;)V",
  );

  static final _onSuccess = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onSuccess(java.lang.String string)
  void onSuccess(
    jni.JString string,
  ) {
    _onSuccess(reference.pointer, _id_onSuccess as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r"onError",
    r"(Ljava/lang/String;)V",
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onError(java.lang.String string)
  void onError(
    jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ResultCallbacksInterfaceImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onSuccess(Ljava/lang/String;)V") {
        _$impls[$p]!.onSuccess(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"onError(Ljava/lang/String;)V") {
        _$impls[$p]!.onError(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory ResultCallbacksInterface.implement(
    $ResultCallbacksInterfaceImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = ResultCallbacksInterface.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"co.fieldos.zebra_link_os.ResultCallbacksInterface",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ResultCallbacksInterfaceImpl {
  factory $ResultCallbacksInterfaceImpl({
    required void Function(jni.JString string) onSuccess,
    required void Function(jni.JString string) onError,
  }) = _$ResultCallbacksInterfaceImpl;

  void onSuccess(jni.JString string);
  void onError(jni.JString string);
}

class _$ResultCallbacksInterfaceImpl implements $ResultCallbacksInterfaceImpl {
  _$ResultCallbacksInterfaceImpl({
    required void Function(jni.JString string) onSuccess,
    required void Function(jni.JString string) onError,
  })  : _onSuccess = onSuccess,
        _onError = onError;

  final void Function(jni.JString string) _onSuccess;
  final void Function(jni.JString string) _onError;

  void onSuccess(jni.JString string) {
    return _onSuccess(string);
  }

  void onError(jni.JString string) {
    return _onError(string);
  }
}

final class $ResultCallbacksInterfaceType
    extends jni.JObjType<ResultCallbacksInterface> {
  const $ResultCallbacksInterfaceType();

  @override
  String get signature =>
      r"Lco/fieldos/zebra_link_os/ResultCallbacksInterface;";

  @override
  ResultCallbacksInterface fromReference(jni.JReference reference) =>
      ResultCallbacksInterface.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResultCallbacksInterfaceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResultCallbacksInterfaceType) &&
        other is $ResultCallbacksInterfaceType;
  }
}
