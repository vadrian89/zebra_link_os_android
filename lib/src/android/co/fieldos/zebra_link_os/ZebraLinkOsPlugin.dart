// Copyright 2024 Adrian Verban

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'DiscoveryHandlerBluetooth.dart' as discoveryhandlerbluetooth_;

import 'ResultCallbacksInterface.dart' as resultcallbacksinterface_;

/// from: `co.fieldos.zebra_link_os.ZebraLinkOsPlugin`
class ZebraLinkOsPlugin extends jni.JObject {
  @override
  late final jni.JObjType<ZebraLinkOsPlugin> $type = type;

  ZebraLinkOsPlugin.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'co/fieldos/zebra_link_os/ZebraLinkOsPlugin');

  /// The type which includes information such as the signature of this class.
  static const type = $ZebraLinkOsPluginType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ZebraLinkOsPlugin(
    jni.JObject context,
  ) {
    return ZebraLinkOsPlugin.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_connect = _class.instanceMethodId(
    r'connect',
    r'(Ljava/lang/String;Lco/fieldos/zebra_link_os/ResultCallbacksInterface;)V',
  );

  static final _connect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public final void connect(java.lang.String string, co.fieldos.zebra_link_os.ResultCallbacksInterface resultCallbacksInterface)`
  void connect(
    jni.JString string,
    resultcallbacksinterface_.ResultCallbacksInterface resultCallbacksInterface,
  ) {
    _connect(
            reference.pointer,
            _id_connect as jni.JMethodIDPtr,
            string.reference.pointer,
            resultCallbacksInterface.reference.pointer)
        .check();
  }

  static final _id_disconnect = _class.instanceMethodId(
    r'disconnect',
    r'(Lco/fieldos/zebra_link_os/ResultCallbacksInterface;)V',
  );

  static final _disconnect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void disconnect(co.fieldos.zebra_link_os.ResultCallbacksInterface resultCallbacksInterface)`
  void disconnect(
    resultcallbacksinterface_.ResultCallbacksInterface resultCallbacksInterface,
  ) {
    _disconnect(reference.pointer, _id_disconnect as jni.JMethodIDPtr,
            resultCallbacksInterface.reference.pointer)
        .check();
  }

  static final _id_startDiscovery = _class.instanceMethodId(
    r'startDiscovery',
    r'(Lco/fieldos/zebra_link_os/DiscoveryHandlerBluetooth;)V',
  );

  static final _startDiscovery = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void startDiscovery(co.fieldos.zebra_link_os.DiscoveryHandlerBluetooth discoveryHandlerBluetooth)`
  void startDiscovery(
    discoveryhandlerbluetooth_.DiscoveryHandlerBluetooth
        discoveryHandlerBluetooth,
  ) {
    _startDiscovery(reference.pointer, _id_startDiscovery as jni.JMethodIDPtr,
            discoveryHandlerBluetooth.reference.pointer)
        .check();
  }

  static final _id_printImage = _class.instanceMethodId(
    r'printImage',
    r'(Ljava/lang/String;IIIIILco/fieldos/zebra_link_os/ResultCallbacksInterface;)V',
  );

  static final _printImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void printImage(java.lang.String string, int i, int i1, int i2, int i3, int i4, co.fieldos.zebra_link_os.ResultCallbacksInterface resultCallbacksInterface)`
  void printImage(
    jni.JString string,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    resultcallbacksinterface_.ResultCallbacksInterface resultCallbacksInterface,
  ) {
    _printImage(
            reference.pointer,
            _id_printImage as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1,
            i2,
            i3,
            i4,
            resultCallbacksInterface.reference.pointer)
        .check();
  }

  static final _id_storeImage = _class.instanceMethodId(
    r'storeImage',
    r'(Ljava/lang/String;Ljava/lang/String;IILco/fieldos/zebra_link_os/ResultCallbacksInterface;)V',
  );

  static final _storeImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void storeImage(java.lang.String string, java.lang.String string1, int i, int i1, co.fieldos.zebra_link_os.ResultCallbacksInterface resultCallbacksInterface)`
  void storeImage(
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    resultcallbacksinterface_.ResultCallbacksInterface resultCallbacksInterface,
  ) {
    _storeImage(
            reference.pointer,
            _id_storeImage as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            resultCallbacksInterface.reference.pointer)
        .check();
  }

  static final _id_write = _class.instanceMethodId(
    r'write',
    r'(Ljava/lang/String;Lco/fieldos/zebra_link_os/ResultCallbacksInterface;)V',
  );

  static final _write = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public final void write(java.lang.String string, co.fieldos.zebra_link_os.ResultCallbacksInterface resultCallbacksInterface)`
  void write(
    jni.JString string,
    resultcallbacksinterface_.ResultCallbacksInterface resultCallbacksInterface,
  ) {
    _write(
            reference.pointer,
            _id_write as jni.JMethodIDPtr,
            string.reference.pointer,
            resultCallbacksInterface.reference.pointer)
        .check();
  }
}

final class $ZebraLinkOsPluginType extends jni.JObjType<ZebraLinkOsPlugin> {
  const $ZebraLinkOsPluginType();

  @override
  String get signature => r'Lco/fieldos/zebra_link_os/ZebraLinkOsPlugin;';

  @override
  ZebraLinkOsPlugin fromReference(jni.JReference reference) =>
      ZebraLinkOsPlugin.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ZebraLinkOsPluginType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ZebraLinkOsPluginType) &&
        other is $ZebraLinkOsPluginType;
  }
}
